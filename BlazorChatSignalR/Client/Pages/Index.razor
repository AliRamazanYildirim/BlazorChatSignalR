@page "/"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable 

<PageTitle>SignalR Chat</PageTitle>
<h3>SignalR Chat Platform</h3>

@if(!IstVerbunden)
{
    <div class="input-group">
        <input @bind="benutzername" class="form-control" placeholder="Wie heißt du?">
        <button class="btn btn-outline-success form-control-append" @onclick="Verbindung">Verbindung</button>
    </div>
}
else
{
    <textarea style="width:100%; height:500px;" @ref="TextAreaRef">
        @nachrichten
    </textarea>
    <div class="input-group">
        <input @bind-value="nachricht"
        @bind-value:event="oninput"
        @onkeyup="HandleInput" class="form-control">
        <button class="btn btn-outline-success form-group-append " @onclick="Sende" 
        disabled="@(!IstVerbunden)">Sende
        </button>

    </div>
}

@code{
    private HubConnection? hubVerbindung;
    private string nachrichten = string.Empty;
    private string benutzername = string.Empty;
    private string nachricht = string.Empty;
    ElementReference TextAreaRef;

    private async Task Verbindung()
    {
        hubVerbindung = new HubConnectionBuilder().WithUrl(NavigationManager.
            ToAbsoluteUri($"/chathub?benutzername={benutzername}")).Build();
        hubVerbindung.On<string, string>("MeineErsteNachricht", (benutzer, nachricht) =>
        {
            var nhr = $"{(string.IsNullOrEmpty(benutzer) ? "" : benutzer + ":")}{nachricht}";
            nachrichten += nhr + "\n";
            JSRuntime.InvokeVoidAsync("scrollToBottom", TextAreaRef);
            StateHasChanged();
        });
        await hubVerbindung.StartAsync();

    }

    private async Task Sende()
    {
        if(hubVerbindung!=null)
        {
            await hubVerbindung.SendAsync("SendeNachricht", benutzername, nachricht);
            nachricht=string.Empty;
        }
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if(args.Key==null||args.Key.Equals("Enter"))
        {
            await Sende();
        }
    }

    public bool IstVerbunden => hubVerbindung?.State == HubConnectionState.Connected;
    public async ValueTask DisposeAsync()
    {
        if(hubVerbindung!=null)
        {
            await hubVerbindung.DisposeAsync();
        }
    }
}
